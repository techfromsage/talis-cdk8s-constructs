// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Advanced WebService example > Change release version 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.2",
        "service": "advanced-development-local",
      },
      "name": "advanced-test",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ResourceQuota",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "quota",
      "namespace": "advanced-test",
    },
    "spec": {
      "hard": {
        "cpu": "900m",
        "memory": "1188Mi",
        "pods": 9,
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "ENVIRONMENT": "demo",
      "MESSAGE": "Hello CDK8s!",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "config-c5654mfm82",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "default.conf": "map $http_upgrade $connection_upgrade {
    default "upgrade";
    "" "";
}

upstream application {
    server localhost:8000;
    keepalive 256;
}

server {
    listen 80;
    server_name localhost;
    server_tokens off;

    gzip on;
    gzip_comp_level 4;
    gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location / {
    proxy_pass http://application;
    proxy_http_version 1.1;

    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    
  }

    location /livez {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
    }

    
}
",
      "samesite.conf": "# Implements SameSite cookie flags to ensure that our Login Server cookies are flagged as \`SameSite=None\` and \`Secure\`.
#
# See https://web.dev/samesite-cookies-explained/ for background.
#
# The algorithm is applied to the \`Set-Cookie\` header as delivered by the Login Server JVM application.
# We use user-agent targetting to exclude the known list of incompatible clients from the cookie flags.
# The algorithm for filtering incompatible clients is described here: https://www.chromium.org/updates/same-site/incompatible-clients

# $ua_os_browser - an enumerated combination of OS and browser
map "$http_user_agent" $ua_os_browser {
    default                                                                                               "anything_else";
    "~Chrom(e|ium)\\/(5[1-9]|6[0-6])\\."                                                                    "chromium_51_to_66";
    "~Chrom(e|ium)"                                                                                       "any_chromium";
    "~\\(iP.+; CPU .*OS 12[_\\d]*.*\\) AppleWebKit\\/"                                                        "ios_12_anything";
    "~\\(Macintosh;.*Mac OS X 10_14[_\\d]*.*\\) AppleWebKit\\/.* Version\\/.* Safari/"                         "mac_10_14_safari";
    "~^Mozilla\\/[\\.\\d]+ \\(Macintosh;.*Mac OS X 10_14[_\\d]+\\) AppleWebKit\\/[\\.\\d]+ \\(KHTML, like Gecko\\)$" "mac_10_14_embedded";
    "~UCBrowser\\/\\d\\.\\d+\\.\\d+[\\.\\d]* "                                                                    "ucbrowser_before_12_13_2"; # version < 10
    "~UCBrowser\\/1[01]\\.\\d+\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 10/11
    "~UCBrowser\\/12\\.\\d\\.\\d+[\\.\\d]* "                                                                     "ucbrowser_before_12_13_2"; # version 12.0 - 12.9
    "~UCBrowser\\/12\\.1[012]\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 12.10 - 12.12
    "~UCBrowser\\/12\\.13\\.[01]\\.[\\.\\d]* "                                                                  "ucbrowser_before_12_13_2"; # version 12.13.0 - 12.13.1
}

# $has_webkit_same_site_bug - "true" or "false"
map "$ua_os_browser" $has_webkit_same_site_bug {
    default              "false";
    "ios_12_anything"    "true";
    "mac_10_14_safari"   "true";
    "mac_10_14_embedded" "true";
}

# $drops_unrecognized_same_site_cookies - "true" or "false"
map "$ua_os_browser" $drops_unrecognized_same_site_cookies {
    default                    "false";
    "chromium_51_to_66"        "true";
    "ucbrowser_before_12_13_2" "true";
}

# $is_same_site_none_incompatible - "true" or "false"
map "$drops_unrecognized_same_site_cookies:$has_webkit_same_site_bug" $is_same_site_none_incompatible {
    default "false";
    "~true"  "true";
}

# $should_send_samesite_none - "true" or "false"
map "$is_same_site_none_incompatible" $should_send_samesite_none {
    default "false";
    "false" "true";
}

# $cookie_path_patches - either SameSite cookie flags, or an empty string
map "$should_send_samesite_none" $cookie_path_patches {
    default "";
    "true" "; Secure; SameSite=None";
}

proxy_cookie_path / "/$cookie_path_patches";

# The following may be useful for debugging the various stages of the algorithm
# add_header 'X-cookie_path_patches' "$cookie_path_patches";
# add_header 'X-should_send_samesite_none' "$should_send_samesite_none";
# add_header 'X-is_same_site_none_incompatible' "$is_same_site_none_incompatible";
# add_header 'X-drops_unrecognized_same_site_cookies' "$drops_unrecognized_same_site_cookies";
# add_header 'X-has_webkit_same_site_bug' "$has_webkit_same_site_bug";
# add_header 'X-ua_os_browser' "$ua_os_browser";
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "nginx-config-64ttdhkh54",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.2",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "false",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.2",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-pdb",
      "namespace": "advanced-test",
    },
    "spec": {
      "minAvailable": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "false",
          "instance": "web",
          "role": "server",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.2",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "true",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-c-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.2",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-canary-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.2",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary",
      "namespace": "advanced-test",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "true",
          "instance": "web",
          "role": "server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "advanced",
            "canary": "true",
            "environment": "development",
            "instance": "web",
            "managed-by": "cdk8s",
            "region": "local",
            "release": "v0.2.2",
            "role": "server",
            "service": "advanced-development-local",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "advanced",
                        "canary": "true",
                        "instance": "web",
                        "role": "server",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "ROLLUP_WATCH",
                  "value": "0",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "config-c5654mfm82",
                  },
                },
              ],
              "image": "docker.io/rodolphoalves/swapi-deno:v0.2.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "advanced",
              "ports": [
                {
                  "containerPort": 8000,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/portal",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "100Mi",
                },
              },
            },
            {
              "image": "public.ecr.aws/nginx/nginx:1.21.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "nginx",
              "ports": [
                {
                  "containerPort": 80,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "32Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/nginx/conf.d",
                  "name": "nginx-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "priorityClassName": "web",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 292,
                "name": "nginx-config-64ttdhkh54",
              },
              "name": "nginx-config",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`Advanced WebService example > Snapshot base stage 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "service": "advanced-development-local",
      },
      "name": "advanced-test",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ResourceQuota",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "quota",
      "namespace": "advanced-test",
    },
    "spec": {
      "hard": {
        "cpu": "900m",
        "memory": "1188Mi",
        "pods": 9,
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "ENVIRONMENT": "demo",
      "MESSAGE": "Hello CDK8s!",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "config-c5654mfm82",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "default.conf": "map $http_upgrade $connection_upgrade {
    default "upgrade";
    "" "";
}

upstream application {
    server localhost:8000;
    keepalive 256;
}

server {
    listen 80;
    server_name localhost;
    server_tokens off;

    gzip on;
    gzip_comp_level 4;
    gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location / {
    proxy_pass http://application;
    proxy_http_version 1.1;

    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    
  }

    location /livez {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
    }

    
}
",
      "samesite.conf": "# Implements SameSite cookie flags to ensure that our Login Server cookies are flagged as \`SameSite=None\` and \`Secure\`.
#
# See https://web.dev/samesite-cookies-explained/ for background.
#
# The algorithm is applied to the \`Set-Cookie\` header as delivered by the Login Server JVM application.
# We use user-agent targetting to exclude the known list of incompatible clients from the cookie flags.
# The algorithm for filtering incompatible clients is described here: https://www.chromium.org/updates/same-site/incompatible-clients

# $ua_os_browser - an enumerated combination of OS and browser
map "$http_user_agent" $ua_os_browser {
    default                                                                                               "anything_else";
    "~Chrom(e|ium)\\/(5[1-9]|6[0-6])\\."                                                                    "chromium_51_to_66";
    "~Chrom(e|ium)"                                                                                       "any_chromium";
    "~\\(iP.+; CPU .*OS 12[_\\d]*.*\\) AppleWebKit\\/"                                                        "ios_12_anything";
    "~\\(Macintosh;.*Mac OS X 10_14[_\\d]*.*\\) AppleWebKit\\/.* Version\\/.* Safari/"                         "mac_10_14_safari";
    "~^Mozilla\\/[\\.\\d]+ \\(Macintosh;.*Mac OS X 10_14[_\\d]+\\) AppleWebKit\\/[\\.\\d]+ \\(KHTML, like Gecko\\)$" "mac_10_14_embedded";
    "~UCBrowser\\/\\d\\.\\d+\\.\\d+[\\.\\d]* "                                                                    "ucbrowser_before_12_13_2"; # version < 10
    "~UCBrowser\\/1[01]\\.\\d+\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 10/11
    "~UCBrowser\\/12\\.\\d\\.\\d+[\\.\\d]* "                                                                     "ucbrowser_before_12_13_2"; # version 12.0 - 12.9
    "~UCBrowser\\/12\\.1[012]\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 12.10 - 12.12
    "~UCBrowser\\/12\\.13\\.[01]\\.[\\.\\d]* "                                                                  "ucbrowser_before_12_13_2"; # version 12.13.0 - 12.13.1
}

# $has_webkit_same_site_bug - "true" or "false"
map "$ua_os_browser" $has_webkit_same_site_bug {
    default              "false";
    "ios_12_anything"    "true";
    "mac_10_14_safari"   "true";
    "mac_10_14_embedded" "true";
}

# $drops_unrecognized_same_site_cookies - "true" or "false"
map "$ua_os_browser" $drops_unrecognized_same_site_cookies {
    default                    "false";
    "chromium_51_to_66"        "true";
    "ucbrowser_before_12_13_2" "true";
}

# $is_same_site_none_incompatible - "true" or "false"
map "$drops_unrecognized_same_site_cookies:$has_webkit_same_site_bug" $is_same_site_none_incompatible {
    default "false";
    "~true"  "true";
}

# $should_send_samesite_none - "true" or "false"
map "$is_same_site_none_incompatible" $should_send_samesite_none {
    default "false";
    "false" "true";
}

# $cookie_path_patches - either SameSite cookie flags, or an empty string
map "$should_send_samesite_none" $cookie_path_patches {
    default "";
    "true" "; Secure; SameSite=None";
}

proxy_cookie_path / "/$cookie_path_patches";

# The following may be useful for debugging the various stages of the algorithm
# add_header 'X-cookie_path_patches' "$cookie_path_patches";
# add_header 'X-should_send_samesite_none' "$should_send_samesite_none";
# add_header 'X-is_same_site_none_incompatible' "$is_same_site_none_incompatible";
# add_header 'X-drops_unrecognized_same_site_cookies' "$drops_unrecognized_same_site_cookies";
# add_header 'X-has_webkit_same_site_bug' "$has_webkit_same_site_bug";
# add_header 'X-ua_os_browser' "$ua_os_browser";
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "nginx-config-64ttdhkh54",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "false",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web",
      "namespace": "advanced-test",
    },
    "spec": {
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "false",
          "instance": "web",
          "role": "server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "advanced",
            "canary": "false",
            "environment": "development",
            "instance": "web",
            "managed-by": "cdk8s",
            "region": "local",
            "release": "v0.2.1",
            "role": "server",
            "service": "advanced-development-local",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "advanced",
                        "canary": "false",
                        "instance": "web",
                        "role": "server",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "ROLLUP_WATCH",
                  "value": "0",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "config-c5654mfm82",
                  },
                },
              ],
              "image": "docker.io/rodolphoalves/swapi-deno:v0.2.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "advanced",
              "ports": [
                {
                  "containerPort": 8000,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/portal",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "100Mi",
                },
              },
            },
            {
              "image": "public.ecr.aws/nginx/nginx:1.21.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "nginx",
              "ports": [
                {
                  "containerPort": 80,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "32Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/nginx/conf.d",
                  "name": "nginx-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "priorityClassName": "web",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 292,
                "name": "nginx-config-64ttdhkh54",
              },
              "name": "nginx-config",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "autoscaling/v2",
    "kind": "HorizontalPodAutoscaler",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-hpa",
      "namespace": "advanced-test",
    },
    "spec": {
      "maxReplicas": 5,
      "metrics": [
        {
          "resource": {
            "name": "cpu",
            "target": {
              "averageUtilization": 50,
              "type": "Utilization",
            },
          },
          "type": "Resource",
        },
      ],
      "minReplicas": 2,
      "scaleTargetRef": {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "name": "web",
      },
    },
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-pdb",
      "namespace": "advanced-test",
    },
    "spec": {
      "minAvailable": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "false",
          "instance": "web",
          "role": "server",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "true",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-c-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-canary-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary",
      "namespace": "advanced-test",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "true",
          "instance": "web",
          "role": "server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "advanced",
            "canary": "true",
            "environment": "development",
            "instance": "web",
            "managed-by": "cdk8s",
            "region": "local",
            "release": "v0.2.1",
            "role": "server",
            "service": "advanced-development-local",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "advanced",
                        "canary": "true",
                        "instance": "web",
                        "role": "server",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "ROLLUP_WATCH",
                  "value": "0",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "config-c5654mfm82",
                  },
                },
              ],
              "image": "docker.io/rodolphoalves/swapi-deno:v0.2.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "advanced",
              "ports": [
                {
                  "containerPort": 8000,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/portal",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "100Mi",
                },
              },
            },
            {
              "image": "public.ecr.aws/nginx/nginx:1.21.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "nginx",
              "ports": [
                {
                  "containerPort": 80,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "32Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/nginx/conf.d",
                  "name": "nginx-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "priorityClassName": "web",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 292,
                "name": "nginx-config-64ttdhkh54",
              },
              "name": "nginx-config",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`Advanced WebService example > Snapshot canary stage 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "service": "advanced-development-local",
      },
      "name": "advanced-test",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ResourceQuota",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "quota",
      "namespace": "advanced-test",
    },
    "spec": {
      "hard": {
        "cpu": "900m",
        "memory": "1188Mi",
        "pods": 9,
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "ENVIRONMENT": "demo",
      "MESSAGE": "Hello CDK8s!",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "config-c5654mfm82",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "default.conf": "map $http_upgrade $connection_upgrade {
    default "upgrade";
    "" "";
}

upstream application {
    server localhost:8000;
    keepalive 256;
}

server {
    listen 80;
    server_name localhost;
    server_tokens off;

    gzip on;
    gzip_comp_level 4;
    gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location / {
    proxy_pass http://application;
    proxy_http_version 1.1;

    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    
  }

    location /livez {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
    }

    
}
",
      "samesite.conf": "# Implements SameSite cookie flags to ensure that our Login Server cookies are flagged as \`SameSite=None\` and \`Secure\`.
#
# See https://web.dev/samesite-cookies-explained/ for background.
#
# The algorithm is applied to the \`Set-Cookie\` header as delivered by the Login Server JVM application.
# We use user-agent targetting to exclude the known list of incompatible clients from the cookie flags.
# The algorithm for filtering incompatible clients is described here: https://www.chromium.org/updates/same-site/incompatible-clients

# $ua_os_browser - an enumerated combination of OS and browser
map "$http_user_agent" $ua_os_browser {
    default                                                                                               "anything_else";
    "~Chrom(e|ium)\\/(5[1-9]|6[0-6])\\."                                                                    "chromium_51_to_66";
    "~Chrom(e|ium)"                                                                                       "any_chromium";
    "~\\(iP.+; CPU .*OS 12[_\\d]*.*\\) AppleWebKit\\/"                                                        "ios_12_anything";
    "~\\(Macintosh;.*Mac OS X 10_14[_\\d]*.*\\) AppleWebKit\\/.* Version\\/.* Safari/"                         "mac_10_14_safari";
    "~^Mozilla\\/[\\.\\d]+ \\(Macintosh;.*Mac OS X 10_14[_\\d]+\\) AppleWebKit\\/[\\.\\d]+ \\(KHTML, like Gecko\\)$" "mac_10_14_embedded";
    "~UCBrowser\\/\\d\\.\\d+\\.\\d+[\\.\\d]* "                                                                    "ucbrowser_before_12_13_2"; # version < 10
    "~UCBrowser\\/1[01]\\.\\d+\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 10/11
    "~UCBrowser\\/12\\.\\d\\.\\d+[\\.\\d]* "                                                                     "ucbrowser_before_12_13_2"; # version 12.0 - 12.9
    "~UCBrowser\\/12\\.1[012]\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 12.10 - 12.12
    "~UCBrowser\\/12\\.13\\.[01]\\.[\\.\\d]* "                                                                  "ucbrowser_before_12_13_2"; # version 12.13.0 - 12.13.1
}

# $has_webkit_same_site_bug - "true" or "false"
map "$ua_os_browser" $has_webkit_same_site_bug {
    default              "false";
    "ios_12_anything"    "true";
    "mac_10_14_safari"   "true";
    "mac_10_14_embedded" "true";
}

# $drops_unrecognized_same_site_cookies - "true" or "false"
map "$ua_os_browser" $drops_unrecognized_same_site_cookies {
    default                    "false";
    "chromium_51_to_66"        "true";
    "ucbrowser_before_12_13_2" "true";
}

# $is_same_site_none_incompatible - "true" or "false"
map "$drops_unrecognized_same_site_cookies:$has_webkit_same_site_bug" $is_same_site_none_incompatible {
    default "false";
    "~true"  "true";
}

# $should_send_samesite_none - "true" or "false"
map "$is_same_site_none_incompatible" $should_send_samesite_none {
    default "false";
    "false" "true";
}

# $cookie_path_patches - either SameSite cookie flags, or an empty string
map "$should_send_samesite_none" $cookie_path_patches {
    default "";
    "true" "; Secure; SameSite=None";
}

proxy_cookie_path / "/$cookie_path_patches";

# The following may be useful for debugging the various stages of the algorithm
# add_header 'X-cookie_path_patches' "$cookie_path_patches";
# add_header 'X-should_send_samesite_none' "$should_send_samesite_none";
# add_header 'X-is_same_site_none_incompatible' "$is_same_site_none_incompatible";
# add_header 'X-drops_unrecognized_same_site_cookies' "$drops_unrecognized_same_site_cookies";
# add_header 'X-has_webkit_same_site_bug' "$has_webkit_same_site_bug";
# add_header 'X-ua_os_browser' "$ua_os_browser";
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "nginx-config-64ttdhkh54",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "false",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-pdb",
      "namespace": "advanced-test",
    },
    "spec": {
      "minAvailable": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "false",
          "instance": "web",
          "role": "server",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "true",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-c-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-canary-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary",
      "namespace": "advanced-test",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "true",
          "instance": "web",
          "role": "server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "advanced",
            "canary": "true",
            "environment": "development",
            "instance": "web",
            "managed-by": "cdk8s",
            "region": "local",
            "release": "v0.2.1",
            "role": "server",
            "service": "advanced-development-local",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "advanced",
                        "canary": "true",
                        "instance": "web",
                        "role": "server",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "ROLLUP_WATCH",
                  "value": "0",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "config-c5654mfm82",
                  },
                },
              ],
              "image": "docker.io/rodolphoalves/swapi-deno:v0.2.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "advanced",
              "ports": [
                {
                  "containerPort": 8000,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/portal",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "100Mi",
                },
              },
            },
            {
              "image": "public.ecr.aws/nginx/nginx:1.21.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "nginx",
              "ports": [
                {
                  "containerPort": 80,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "32Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/nginx/conf.d",
                  "name": "nginx-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "priorityClassName": "web",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 292,
                "name": "nginx-config-64ttdhkh54",
              },
              "name": "nginx-config",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`Advanced WebService example > Snapshot full stage 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "service": "advanced-development-local",
      },
      "name": "advanced-test",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ResourceQuota",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "quota",
      "namespace": "advanced-test",
    },
    "spec": {
      "hard": {
        "cpu": "900m",
        "memory": "1188Mi",
        "pods": 9,
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "ENVIRONMENT": "demo",
      "MESSAGE": "Hello CDK8s!",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "config-c5654mfm82",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "default.conf": "map $http_upgrade $connection_upgrade {
    default "upgrade";
    "" "";
}

upstream application {
    server localhost:8000;
    keepalive 256;
}

server {
    listen 80;
    server_name localhost;
    server_tokens off;

    gzip on;
    gzip_comp_level 4;
    gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location / {
    proxy_pass http://application;
    proxy_http_version 1.1;

    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    
  }

    location /livez {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
    }

    
}
",
      "samesite.conf": "# Implements SameSite cookie flags to ensure that our Login Server cookies are flagged as \`SameSite=None\` and \`Secure\`.
#
# See https://web.dev/samesite-cookies-explained/ for background.
#
# The algorithm is applied to the \`Set-Cookie\` header as delivered by the Login Server JVM application.
# We use user-agent targetting to exclude the known list of incompatible clients from the cookie flags.
# The algorithm for filtering incompatible clients is described here: https://www.chromium.org/updates/same-site/incompatible-clients

# $ua_os_browser - an enumerated combination of OS and browser
map "$http_user_agent" $ua_os_browser {
    default                                                                                               "anything_else";
    "~Chrom(e|ium)\\/(5[1-9]|6[0-6])\\."                                                                    "chromium_51_to_66";
    "~Chrom(e|ium)"                                                                                       "any_chromium";
    "~\\(iP.+; CPU .*OS 12[_\\d]*.*\\) AppleWebKit\\/"                                                        "ios_12_anything";
    "~\\(Macintosh;.*Mac OS X 10_14[_\\d]*.*\\) AppleWebKit\\/.* Version\\/.* Safari/"                         "mac_10_14_safari";
    "~^Mozilla\\/[\\.\\d]+ \\(Macintosh;.*Mac OS X 10_14[_\\d]+\\) AppleWebKit\\/[\\.\\d]+ \\(KHTML, like Gecko\\)$" "mac_10_14_embedded";
    "~UCBrowser\\/\\d\\.\\d+\\.\\d+[\\.\\d]* "                                                                    "ucbrowser_before_12_13_2"; # version < 10
    "~UCBrowser\\/1[01]\\.\\d+\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 10/11
    "~UCBrowser\\/12\\.\\d\\.\\d+[\\.\\d]* "                                                                     "ucbrowser_before_12_13_2"; # version 12.0 - 12.9
    "~UCBrowser\\/12\\.1[012]\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 12.10 - 12.12
    "~UCBrowser\\/12\\.13\\.[01]\\.[\\.\\d]* "                                                                  "ucbrowser_before_12_13_2"; # version 12.13.0 - 12.13.1
}

# $has_webkit_same_site_bug - "true" or "false"
map "$ua_os_browser" $has_webkit_same_site_bug {
    default              "false";
    "ios_12_anything"    "true";
    "mac_10_14_safari"   "true";
    "mac_10_14_embedded" "true";
}

# $drops_unrecognized_same_site_cookies - "true" or "false"
map "$ua_os_browser" $drops_unrecognized_same_site_cookies {
    default                    "false";
    "chromium_51_to_66"        "true";
    "ucbrowser_before_12_13_2" "true";
}

# $is_same_site_none_incompatible - "true" or "false"
map "$drops_unrecognized_same_site_cookies:$has_webkit_same_site_bug" $is_same_site_none_incompatible {
    default "false";
    "~true"  "true";
}

# $should_send_samesite_none - "true" or "false"
map "$is_same_site_none_incompatible" $should_send_samesite_none {
    default "false";
    "false" "true";
}

# $cookie_path_patches - either SameSite cookie flags, or an empty string
map "$should_send_samesite_none" $cookie_path_patches {
    default "";
    "true" "; Secure; SameSite=None";
}

proxy_cookie_path / "/$cookie_path_patches";

# The following may be useful for debugging the various stages of the algorithm
# add_header 'X-cookie_path_patches' "$cookie_path_patches";
# add_header 'X-should_send_samesite_none' "$should_send_samesite_none";
# add_header 'X-is_same_site_none_incompatible' "$is_same_site_none_incompatible";
# add_header 'X-drops_unrecognized_same_site_cookies' "$drops_unrecognized_same_site_cookies";
# add_header 'X-has_webkit_same_site_bug' "$has_webkit_same_site_bug";
# add_header 'X-ua_os_browser' "$ua_os_browser";
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "nginx-config-64ttdhkh54",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web",
      "namespace": "advanced-test",
    },
    "spec": {
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "false",
          "instance": "web",
          "role": "server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "advanced",
            "canary": "false",
            "environment": "development",
            "instance": "web",
            "managed-by": "cdk8s",
            "region": "local",
            "release": "v0.2.1",
            "role": "server",
            "service": "advanced-development-local",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "advanced",
                        "canary": "false",
                        "instance": "web",
                        "role": "server",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "ROLLUP_WATCH",
                  "value": "0",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "config-c5654mfm82",
                  },
                },
              ],
              "image": "docker.io/rodolphoalves/swapi-deno:v0.2.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "advanced",
              "ports": [
                {
                  "containerPort": 8000,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/portal",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "100Mi",
                },
              },
            },
            {
              "image": "public.ecr.aws/nginx/nginx:1.21.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "nginx",
              "ports": [
                {
                  "containerPort": 80,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "32Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/nginx/conf.d",
                  "name": "nginx-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "priorityClassName": "web",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 292,
                "name": "nginx-config-64ttdhkh54",
              },
              "name": "nginx-config",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "autoscaling/v2",
    "kind": "HorizontalPodAutoscaler",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-hpa",
      "namespace": "advanced-test",
    },
    "spec": {
      "maxReplicas": 5,
      "metrics": [
        {
          "resource": {
            "name": "cpu",
            "target": {
              "averageUtilization": 50,
              "type": "Utilization",
            },
          },
          "type": "Resource",
        },
      ],
      "minReplicas": 2,
      "scaleTargetRef": {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "name": "web",
      },
    },
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-pdb",
      "namespace": "advanced-test",
    },
    "spec": {
      "minAvailable": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "false",
          "instance": "web",
          "role": "server",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "true",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-c-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-canary-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary",
      "namespace": "advanced-test",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "true",
          "instance": "web",
          "role": "server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "advanced",
            "canary": "true",
            "environment": "development",
            "instance": "web",
            "managed-by": "cdk8s",
            "region": "local",
            "release": "v0.2.1",
            "role": "server",
            "service": "advanced-development-local",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "advanced",
                        "canary": "true",
                        "instance": "web",
                        "role": "server",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "ROLLUP_WATCH",
                  "value": "0",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "config-c5654mfm82",
                  },
                },
              ],
              "image": "docker.io/rodolphoalves/swapi-deno:v0.2.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "advanced",
              "ports": [
                {
                  "containerPort": 8000,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/portal",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "100Mi",
                },
              },
            },
            {
              "image": "public.ecr.aws/nginx/nginx:1.21.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "nginx",
              "ports": [
                {
                  "containerPort": 80,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "32Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/nginx/conf.d",
                  "name": "nginx-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "priorityClassName": "web",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 292,
                "name": "nginx-config-64ttdhkh54",
              },
              "name": "nginx-config",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`Advanced WebService example > Snapshot post-canary stage 1`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "service": "advanced-development-local",
      },
      "name": "advanced-test",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ResourceQuota",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "quota",
      "namespace": "advanced-test",
    },
    "spec": {
      "hard": {
        "cpu": "900m",
        "memory": "1188Mi",
        "pods": 9,
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "ENVIRONMENT": "demo",
      "MESSAGE": "Hello CDK8s!",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "config-c5654mfm82",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "default.conf": "map $http_upgrade $connection_upgrade {
    default "upgrade";
    "" "";
}

upstream application {
    server localhost:8000;
    keepalive 256;
}

server {
    listen 80;
    server_name localhost;
    server_tokens off;

    gzip on;
    gzip_comp_level 4;
    gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location / {
    proxy_pass http://application;
    proxy_http_version 1.1;

    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    
  }

    location /livez {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
    }

    
}
",
      "samesite.conf": "# Implements SameSite cookie flags to ensure that our Login Server cookies are flagged as \`SameSite=None\` and \`Secure\`.
#
# See https://web.dev/samesite-cookies-explained/ for background.
#
# The algorithm is applied to the \`Set-Cookie\` header as delivered by the Login Server JVM application.
# We use user-agent targetting to exclude the known list of incompatible clients from the cookie flags.
# The algorithm for filtering incompatible clients is described here: https://www.chromium.org/updates/same-site/incompatible-clients

# $ua_os_browser - an enumerated combination of OS and browser
map "$http_user_agent" $ua_os_browser {
    default                                                                                               "anything_else";
    "~Chrom(e|ium)\\/(5[1-9]|6[0-6])\\."                                                                    "chromium_51_to_66";
    "~Chrom(e|ium)"                                                                                       "any_chromium";
    "~\\(iP.+; CPU .*OS 12[_\\d]*.*\\) AppleWebKit\\/"                                                        "ios_12_anything";
    "~\\(Macintosh;.*Mac OS X 10_14[_\\d]*.*\\) AppleWebKit\\/.* Version\\/.* Safari/"                         "mac_10_14_safari";
    "~^Mozilla\\/[\\.\\d]+ \\(Macintosh;.*Mac OS X 10_14[_\\d]+\\) AppleWebKit\\/[\\.\\d]+ \\(KHTML, like Gecko\\)$" "mac_10_14_embedded";
    "~UCBrowser\\/\\d\\.\\d+\\.\\d+[\\.\\d]* "                                                                    "ucbrowser_before_12_13_2"; # version < 10
    "~UCBrowser\\/1[01]\\.\\d+\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 10/11
    "~UCBrowser\\/12\\.\\d\\.\\d+[\\.\\d]* "                                                                     "ucbrowser_before_12_13_2"; # version 12.0 - 12.9
    "~UCBrowser\\/12\\.1[012]\\.\\d+[\\.\\d]* "                                                                 "ucbrowser_before_12_13_2"; # version 12.10 - 12.12
    "~UCBrowser\\/12\\.13\\.[01]\\.[\\.\\d]* "                                                                  "ucbrowser_before_12_13_2"; # version 12.13.0 - 12.13.1
}

# $has_webkit_same_site_bug - "true" or "false"
map "$ua_os_browser" $has_webkit_same_site_bug {
    default              "false";
    "ios_12_anything"    "true";
    "mac_10_14_safari"   "true";
    "mac_10_14_embedded" "true";
}

# $drops_unrecognized_same_site_cookies - "true" or "false"
map "$ua_os_browser" $drops_unrecognized_same_site_cookies {
    default                    "false";
    "chromium_51_to_66"        "true";
    "ucbrowser_before_12_13_2" "true";
}

# $is_same_site_none_incompatible - "true" or "false"
map "$drops_unrecognized_same_site_cookies:$has_webkit_same_site_bug" $is_same_site_none_incompatible {
    default "false";
    "~true"  "true";
}

# $should_send_samesite_none - "true" or "false"
map "$is_same_site_none_incompatible" $should_send_samesite_none {
    default "false";
    "false" "true";
}

# $cookie_path_patches - either SameSite cookie flags, or an empty string
map "$should_send_samesite_none" $cookie_path_patches {
    default "";
    "true" "; Secure; SameSite=None";
}

proxy_cookie_path / "/$cookie_path_patches";

# The following may be useful for debugging the various stages of the algorithm
# add_header 'X-cookie_path_patches' "$cookie_path_patches";
# add_header 'X-should_send_samesite_none' "$should_send_samesite_none";
# add_header 'X-is_same_site_none_incompatible' "$is_same_site_none_incompatible";
# add_header 'X-drops_unrecognized_same_site_cookies' "$drops_unrecognized_same_site_cookies";
# add_header 'X-has_webkit_same_site_bug' "$has_webkit_same_site_bug";
# add_header 'X-ua_os_browser' "$ua_os_browser";
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "advanced",
        "environment": "development",
        "managed-by": "cdk8s",
        "prunable": "true",
        "region": "local",
        "service": "advanced-development-local",
      },
      "name": "nginx-config-64ttdhkh54",
      "namespace": "advanced-test",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "false",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-pdb",
      "namespace": "advanced-test",
    },
    "spec": {
      "minAvailable": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "false",
          "instance": "web",
          "role": "server",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "talis.io/chat": "https://example.slack.com/archives/ABCDEF123",
        "talis.io/description": "Advanced web service",
        "talis.io/graphs": "https://example.io/grafana",
        "talis.io/issues": "https://github.com/talis/talis-cdk8s-constructs/issues",
        "talis.io/logs": "https://example.io/loki",
        "talis.io/repository": "https://github.com/talis/talis-cdk8s-constructs",
        "talis.io/runbook": "https://example.io/wiki/runbook",
        "talis.io/uptime": "https://example.io/uptime",
        "talis.io/url": "https://api.example.com/",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-service",
      "namespace": "advanced-test",
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": 80,
        },
      ],
      "selector": {
        "app": "advanced",
        "canary": "true",
        "instance": "web",
        "role": "server",
      },
      "type": "NodePort",
    },
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "alb.ingress.kubernetes.io/actions.server-status-rule": "{"type":"fixed-response","fixedResponseConfig":{"statusCode":"404","contentType":"text/plain","messageBody":"404: Not Found"}}",
        "alb.ingress.kubernetes.io/listen-ports": "[{"HTTP":80},{"HTTPS":443}]",
        "alb.ingress.kubernetes.io/load-balancer-attributes": "idle_timeout.timeout_seconds=60",
        "alb.ingress.kubernetes.io/load-balancer-name": "advanced-test-web-c-develop",
        "alb.ingress.kubernetes.io/ssl-policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "alb.ingress.kubernetes.io/success-codes": "200,303",
        "alb.ingress.kubernetes.io/tags": "service=advanced-development-local,instance=web,environment=development",
        "alb.ingress.kubernetes.io/target-type": "instance",
      },
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary-ingress",
      "namespace": "advanced-test",
    },
    "spec": {
      "defaultBackend": {
        "service": {
          "name": "web-canary-service",
          "port": {
            "number": 80,
          },
        },
      },
      "ingressClassName": "aws-load-balancer-internet-facing",
      "rules": [
        {
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "server-status-rule",
                    "port": {
                      "name": "use-annotation",
                    },
                  },
                },
                "path": "/server-status",
                "pathType": "Prefix",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "*.example.com",
          ],
        },
      ],
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "advanced",
        "canary": "true",
        "environment": "development",
        "instance": "web",
        "managed-by": "cdk8s",
        "region": "local",
        "release": "v0.2.1",
        "role": "server",
        "service": "advanced-development-local",
      },
      "name": "web-canary",
      "namespace": "advanced-test",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "app": "advanced",
          "canary": "true",
          "instance": "web",
          "role": "server",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "advanced",
            "canary": "true",
            "environment": "development",
            "instance": "web",
            "managed-by": "cdk8s",
            "region": "local",
            "release": "v0.2.1",
            "role": "server",
            "service": "advanced-development-local",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "advanced",
                        "canary": "true",
                        "instance": "web",
                        "role": "server",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "env": [
                {
                  "name": "ROLLUP_WATCH",
                  "value": "0",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "config-c5654mfm82",
                  },
                },
              ],
              "image": "docker.io/rodolphoalves/swapi-deno:v0.2.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "advanced",
              "ports": [
                {
                  "containerPort": 8000,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/portal",
                  "port": 8000,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "100Mi",
                },
              },
            },
            {
              "image": "public.ecr.aws/nginx/nginx:1.21.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "nginx",
              "ports": [
                {
                  "containerPort": 80,
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/livez",
                  "port": 80,
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "resources": {
                "limits": {
                  "memory": "128Mi",
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "32Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/nginx/conf.d",
                  "name": "nginx-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "priorityClassName": "web",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 292,
                "name": "nginx-config-64ttdhkh54",
              },
              "name": "nginx-config",
            },
          ],
        },
      },
    },
  },
]
`;
